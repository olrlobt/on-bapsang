version: "3.8"
services:
  db:
    image: mysql:8.0
    container_name: bapsang-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./initdb:/docker-entrypoint-initdb.d
      - ./mysql/conf.d:/etc/mysql/conf.d
    networks:
      - onbapsang-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: bapsang-redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - onbapsang-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bapsang-backend
    restart: always
    environment:
      SERVER_PORT: ${SERVER_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      UPSTAGE_API_TOKEN: ${UPSTAGE_API_TOKEN}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - db
      - ai
      - redis
    ports:
      - "8081:8081"
    networks:
      - onbapsang-net

  ai:
    build:
      context: .
      dockerfile: ai/Dockerfile
    container_name: bapsang-ai
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      - db
    ports:
      - "8000:8000"
    networks:
      - onbapsang-net

volumes:
  db_data:

networks:
  onbapsang-net:
    driver: bridge
